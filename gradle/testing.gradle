apply plugin: "org.sonarqube"
apply plugin: 'java'

sonarqube {
    properties {
        property "sonar.projectKey", "pl.mk5.gdx-fireapp:gdx-fireapp"
        property "sonar.projectName", "gdx-fireapp"
    }
}

configure(subprojects.findAll { it.name.indexOf("android") < 0 }) {
    apply plugin: "java"
    apply plugin: "jacoco"

    sonarqube {
        properties {
            property "sonar.sources", "$projectDir/src"
            property "sonar.binaries", "$projectDir/build/classes/main"
            property "sonar.java.binaries", "$projectDir/build/classes/main"
            property "sonar.tests", "$projectDir/tests"
            property "sonar.java.test.binaries", "$projectDir/build/classes/test"

            property "sonar.jacoco.reportPaths", "$buildDir/jacoco/*.exec"
        }
    }

    jacocoTestReport {
        group "reporting"
        reports {
            csv.enabled false
            html.enabled true
            xml.enabled true
            html.destination file("${buildDir}/jacoco-html")
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                def excludes = [
                        '**/bindings/**', '**/fakes/**', '**/com/badlogic/**',
                        // Exclude because - do nothing special
                        '**/mk/gdx/firebase/html/crash/**', '**/mk/gdx/firebase/html/analytics/**',
                        '**/mk/gdx/firebase/analytics/**', '**/mk/gdx/firebase/exceptions/**', 'mk/gdx/firebase/html/exceptions/**',
                        '**/mk/gdx/firebase/ios/exceptions', '**/mk/gdx/firebase/ios/database/observers/DataObserversManager*',
                        // Exclude for some time because - JaCoCo can't get it coverage (PowerMock issue)

                        // Exclude because - only native gwt methods
                        '**/mk/gdx/firebase/html/auth/FirebaseUserJSON*',
                        '**/mk/gdx/firebase/html/auth/GoogleAuthJS*',
                        '**/mk/gdx/firebase/html/storage/FullMetaData*',
                        '**/mk/gdx/firebase/html/storage/UploadTaskSnapshot*',
                        '**/mk/gdx/firebase/html/database/resolvers/GwtQueryFilterResolver*',
                        '**/mk/gdx/firebase/html/database/resolvers/GwtQueryOrderByResolver*',
                        '**/mk/gdx/firebase/html/database/DatabaseReference*',
                ]
                if( project.name.equals('gdx-fireapp-html') ) {
                    excludes.push('mk/gdx/firebase/helpers/ImageHelper*')
                }
                fileTree(dir: it, exclude: excludes)
            })
        }
    }

    jacocoTestReport.dependsOn.add("test")
}

configure(subprojects.findAll { it.name.equals('gdx-fireapp-android') }) {
    apply plugin: "android-library"
    apply plugin: "jacoco-android"

    sonarqube {
        properties {
            property "sonar.sources", "$projectDir/src/main/java"
            property "sonar.binaries", "$projectDir/build/intermediates/classes/debug"
            property "sonar.java.binaries", "$projectDir/build/intermediates/classes/debug"
            property "sonar.tests", "$projectDir/src/test/java"
            property "sonar.java.test.binaries", "$projectDir/build/intermediates/classes/test/debug"

            def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files
            def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files
            unit.addAll(ui)
            def files = unit.join(", ")

            property "sonar.jacoco.reportPaths", files
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.junit.reportsPath", "$projectDir/build/test-results/debug"
            property "sonar.android.lint.report", "$projectDir/build/reports/lint-results.xml"
        }
    }

    jacocoAndroidUnitTestReport {
        csv.enabled false
        html.enabled true
        xml.enabled true
    }

    android {
        buildTypes {
            debug {
                testCoverageEnabled = true
            }
        }
        testOptions {
            unitTests.all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    jacocoTestReport.dependsOn.add("test")
}

allprojects {
    apply plugin: "jacoco"

    jacoco {
        toolVersion = '0.8.3'
        reportsDir = file("$buildDir/jacoco")
    }
}